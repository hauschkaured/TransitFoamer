// use std::collections::{HashMap, HashSet};
// use crate::gtfs_static;

// pub fn trips_per_route(file_path: String, function: &str) -> HashMap<String, Vec<String>> {
//     let mut trips_per_route: HashMap<String, Vec<String>> = HashMap::new();
//     let mut path = file_path.to_string();
//     path.push_str(function);

//     let trips = gtfs_static::get_data(file_path, function);

//     for item in trips.data.keys() {
//         let route = trips.data.get(k)
//         let route = item.1.route_id;
//         let trip_id = item.0;
//         if trips_per_route.contains_key(&route) {
//             let mut vector = trips_per_route.remove(&route).unwrap();
//             vector.push(trip_id.clone());
//             trips_per_route.insert(route.clone(), vector.clone());
//         } else {
//             trips_per_route.insert(route, vec![trip_id]);
//         }
//     }

//     trips_per_route

//     pub fn stops_per_trip(city: &str) -> HashMap<String, Vec<String>> {
//         let mut stops_per_trip: HashMap<String, Vec<String>> = HashMap::new();

//         let mut file_path = String::from("src/static");
//         file_path.push_str(city);
//         let gtfs = Gtfs::new(file_path.as_str()).expect("Should have been able to read file.");
//         let trips = gtfs.trips;

//         for item in trips {
//             let stop_times = item.1.stop_times;
//             let trip_id = item.0;
//             if stops_per_trip.contains_key(&trip_id.clone()) {
//                 for stop_time in stop_times {
//                     let stop_id = &stop_time.stop.id;
//                     let mut vector = stops_per_trip[&trip_id.clone()].clone();
//                     vector.push(stop_id.clone());
//                     stops_per_trip.insert(trip_id.clone(), vector.clone());
//                 }
//             } else {
//                 for stop_time in stop_times {
//                     let stop_id = &stop_time.stop.id;
//                     stops_per_trip.insert(trip_id.clone(), vec![stop_id.clone()]);
//                 }
//             }
//         }

//         stops_per_trip
//     }

//     pub fn routes_per_stop(city: &str) -> HashMap<String, HashSet<String>> {
//         let mut routes_per_stop: HashMap<String, HashSet<String>> = HashMap::new();

//         let trips_per_route = trips_per_route(city);
//         let stops_per_trip = stops_per_trip(city);

//         for route in trips_per_route {
//             let trip_vec = route.clone().1;
//             for trip in trip_vec {
//                 let stops = stops_per_trip.get(&trip).unwrap();
//                 for stop in stops {
//                     if !routes_per_stop.contains_key(stop) {
//                         let mut set = HashSet::new();
//                         set.insert(route.clone().0);
//                         routes_per_stop.insert(stop.to_string(), set);
//                     } else {
//                         let mut set = routes_per_stop.get(stop).unwrap().to_owned();
//                         set.insert(route.clone().0);
//                         routes_per_stop.insert(stop.to_string(), set);
//                     }
//                 }
//             }
//         }

//         println!("{:?}", routes_per_stop);

//         routes_per_stop
//     }

//     // let mut file_path = String::from("src/static");
//     // file_path.push_str(city);
//     // let gtfs = Gtfs::new(file_path.as_str()).expect("Should have been able to read file.");
//     // let trips = gtfs.trips;

//     // for i in trips {
//     //     let stop_times = i.1.stop_times;
//     //     for j in stop_times {
//     //         j.stop.id
//     //     }
//     // }

//     // let keys = static_stop_times.keys();

//     // for key in keys {
//     //     let line = &static_stop_times[key];
//     //     let trip_id = &line[0];
//     //     let stop_id = &line[3];
//     //     let route = static_trips[trip_id][1].clone();
//     //     if !stops_per_route.contains_key(stop_id) {
//     //         let mut set = HashSet::new();
//     //         set.insert(route);
//     //         stops_per_route.insert(stop_id.to_string(), set);
//     //     } else {
//     //         let mut set = stops_per_route[stop_id].clone();
//     //         set.insert(route);
//     //         stops_per_route.insert(stop_id.to_string(), set);
//     //     }
//     // }
//     // stops_per_route
// }
